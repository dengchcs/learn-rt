# 纹理名称, 纹理类型, 纹理参数
# 纹理名称应该是唯一的, 可以在材质定义中引用
textures = [
    ["tex-red",     "solid", 0.54, 0, 0],   # "solid"表示纯色纹理, 参数为RGB值
    ["tex-green",   "solid", 0, 0.4, 0],
    ["tex-blue",    "solid", 0, 0, 0.54],
    ["tex-rice",    "solid", 0.96, 0.96, 0.86],
    ["tex-silver",  "solid", 0.72, 0.72, 0.72],
    ["tex-rabbit",  "solid", 0.98, 0.07, 0.57],
    ["tex-earth",   "image", "assets/earthmap.jpg"],    # "image"表示图片纹理, 参数为文件路径
    ["tex-face",    "image", "assets/awesomeface.jpg"],
    ["tex-board",   "image", "assets/board.jpg"],
]

# 材质名称, 材质类型, 是否使用纹理, 若是则提供纹理名称, 否则提供材质参数
# 材质名称应该是唯一的, 可以在物体定义中引用
materials = [
    # 也可以直接定义 ["mat-lam-red", "lambertian", false, r, g, b]
    ["mat-lam-red",         "lambertian",   true,   "tex-red"], # lambertian: 理想漫反射
    ["mat-lam-green",       "lambertian",   true,   "tex-green"],
    ["mat-lam-blue",        "lambertian",   true,   "tex-blue"],
    ["mat-lam-rice",        "lambertian",   true,   "tex-rice"],
    ["mat-lam-rabbit",      "lambertian",   true,   "tex-rabbit"],
    ["mat-lam-board",       "lambertian",   true,   "tex-board"],
    ["mat-lam-face",        "lambertian",   true,   "tex-face"],
    ["mat-metal-silver",    "metal",        true,   "tex-silver", 0],   # metal: 镜面反射, 最后一个数字表示金属材质的粗糙程度
    ["mat-metal-earth",     "metal",        true,   "tex-earth", 0.1],
    ["mat-metal-rabbit",    "metal",        true,   "tex-rice", 0.5],
    ["mat-liquid",          "dielectric",   false,  1.5],   # dielectric: 透射, 不能使用纹理, 最后一个数字表示折射率
    ["mat-light-white",     "light",        false,  4, 4, 4],   # light: 光源, 不能使用纹理, 后面三个数字分别表示RGB光强
]

# 球心x,y,z坐标, 球半径, 材质名称
spheres = [
    [20, 0, 15, 10, "mat-metal-earth"], # 地球
    [-20, 5, 10, 5, "mat-liquid"],      # 透射
    [35, -35, -35, 15, "mat-metal-silver"], # 镜面
    [0, -10, 30, 5, "mat-liquid"],
    [0, -10, 30, -4.9, "mat-liquid"], # 使用负半径, 和上一个球面一起组成一个透明气泡
]

# 三角形定义: 三个带纹理坐标的顶点+材质名称, 若未使用纹理则可将纹理坐标设为0
# 下例中[-50, -50, 10, 0, 0]表示三角形第一个顶点的位置坐标为(-50, -50, 10), 纹理坐标为(0, 0)
triangles = [
    # 一个三棱锥
    [[-50, -50, 10, 0, 0], [-40, -50, 10, 1, 0], [-45, -50, 0, 0.5, 1], "mat-lam-face"],    # 底面
    [[-50, -50, 10, 0, 0], [-40, -50, 10, 1, 0], [-45, -40, 5, 0.5, 1], "mat-lam-face"],    # 前面
    [[-50, -50, 10, 0, 0], [-45, -50, 0, 1, 0], [-45, -40, 5, 0.5, 1], "mat-lam-face"],     # 左侧面
    [[-40, -50, 10, 0, 0], [-45, -50, 0, 1, 0], [-45, -40, 5, 0.5, 1], "mat-lam-face"],     # 右侧面
]

# 矩形定义: 一个顶点+两条正交边+材质名称, 两条边分别被用作纹理映射的uv方向
# 下例中第一个矩形有一个顶点在(-50,50,-50), 此顶点处的两条边向量分别为(100,0,0)和(0,0,100), 且第一条边用作纹理映射的u方向
rectangles = [
    # "屋子"+顶部光照
    # [[-50, 50, -50], [100, 0, 0], [0, 0, 100], "mat-lam-rice"], # 顶面
    #[[-60, 49.9, -60], [120, 0, 0], [0, 0, 120], "mat-light-white"], # 顶光
    #[[-50, 50, -50], [100, 0, 0], [0, -100, 0], "mat-lam-rice"], # 前面
    #[[-50, 50, -50], [0, -100, 0], [0, 0, 100], "mat-lam-red"], # 左侧面
    #[[50, 50, -50], [0, -100, 0], [0, 0, 100], "mat-lam-green"], # 右侧面
    #[[-50, -50, -50], [100, 0, 0], [0, 0, 100], "mat-lam-board"], # 底面
    #[[-50, -50, 50], [100, 0, 0], [0, 100, 0], "mat-lam-rice"], # 后面

    # 一个立方体
    [[30, -50, 10], [0, 0, -10], [0, 10, 0], "mat-lam-face"],   # 右侧面
    [[30, -50, 10], [0, 0, -10], [-10, 0, 0], "mat-lam-face"],  # 底面
    [[30, -50, 10], [0, 10, 0], [-10, 0, 0], "mat-lam-face"],   # 前面
    [[20, -40, 0], [10, 0, 0], [0, 0, 10], "mat-lam-face"],    # 顶面
    [[20, -40, 0], [10, 0, 0], [0, -10, 0], "mat-lam-face"],   # 后面
    [[20, -40, 0], [0, 0, 10], [0, -10, 0], "mat-lam-face"],   # 左侧面
]

# 三角面片模型路径, 材质(只支持纯色纹理), 中心平移量, 表面到中心点的最长距离, 绕XYZ轴的旋转度数(角度制)
# "中心"定义为所有顶点的平均值, 平移量和距离是为了调整模型位置和大小设置的
meshes = [
    # 下面的模型在调整后中心位于(0, -30, -10), 边缘到中心的最大距离为30, 模型绕Y轴旋转了30度
    ["assets/bun_zipper.ply", [0, -30, -10], 30, [0, 30, 0], true, "mat-metal-rabbit"],
]

envlight = "assets/envlight_town.jpg" # 背景图片

[canvas]
width = 1024             # 图片宽度
height = 1024            # 图片高度
# background = [1.0, 1.0, 1.0]
# background = [0.01, 0.01, 0.01] # 背景色

[options]
samples_per_pixel = 4096 # 每个像素的采样数
max_depth = 10         # 递归的最大层数
use_bvh = true          # 是否使用bvh加速
parallel = true         # 是否并行渲染

[camera]
lookfrom = [-30, 30, 30]    # 相机位置
lookat = [0, 0, 0]     # 焦点
vup = [0, 1, 0]         # 相机上方向
aperture = 0.0          # 相机"孔径", 孔径越大场景越模糊
vfov = 90               # 竖直方向的视角, 角度值
